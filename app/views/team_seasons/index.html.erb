<p id="notice"><%= notice %></p>

<h1>Team Seasons</h1>

<table>
  <thead>
    <tr>
      <th>Season</th>
      <th>City</th>
      <th>Team</th>
      <th>Salary</th>
      <th>Wins</th>
      <th>Losses</th>
      <th>Win %</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @team_seasons.each do |team_season| %>
      <tr>
        <td><%= team_season.season %></td>
        <td><%= team_season.team_city %></td>
        <td><%= team_season.team_name %></td>
        <td><%= team_season.salary %></td>
        <td><%= team_season.wins %></td>
        <td><%= team_season.losses %></td>
        <td><%= team_season.win_percentage.to_s[1..-1] %></td>
        <td><%= link_to 'Show', team_season %></td>
        <td><%= link_to 'Edit', edit_team_season_path(team_season) %></td>
        <td><%= link_to 'Destroy', team_season, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Team Season', new_team_season_path %>


<br><br>
<hr>
<br><br>
<center><h1>Stacked Bar Chart</h1></center>

<svg width="960" height="500"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>

var n = 4, // The number of series.
    m = 30; // The number of values per series.

// The xz array has m elements, representing the x-values shared by all series.
// The yz array has n elements, representing the y-values of each of the n series.
// Each yz[i] is an array of m non-negative numbers representing a y-value for xz[i].
// The y01z array has the same structure as yz, but with stacked [y₀, y₁] instead of y.
var xz = d3.range(m),
    yz = d3.range(n).map(function() { return bumps(m); }),
    y01z = d3.stack().keys(d3.range(n))(d3.transpose(yz)),
    yMax = d3.max(yz, function(y) { return d3.max(y); }),
    y1Max = d3.max(y01z, function(y) { return d3.max(y, function(d) { return d[1]; }); });

var svg = d3.select("svg"),
    margin = {top: 40, right: 10, bottom: 20, left: 10},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var x = d3.scaleBand()
    .domain(xz)
    .rangeRound([0, width])
    .padding(0.08);

var y = d3.scaleLinear()
    .domain([0, y1Max])
    .range([height, 0]);

var color = d3.scaleOrdinal()
    .domain(d3.range(n))
    .range(d3.schemeCategory20c);

var series = g.selectAll(".series")
  .data(y01z)
  .enter().append("g")
    .attr("fill", function(d, i) { return color(i); });

var rect = series.selectAll("rect")
  .data(function(d) { return d; })
  .enter().append("rect")
    .attr("x", function(d, i) { return x(i); })
    .attr("y", height)
    .attr("width", x.bandwidth())
    .attr("height", 0);

rect.transition()
    .delay(function(d, i) { return i * 10; })
    .attr("y", function(d) { return y(d[1]); })
    .attr("height", function(d) { return y(d[0]) - y(d[1]); });

g.append("g")
    .attr("class", "axis axis--x")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x)
        .tickSize(0)
        .tickPadding(6));

d3.selectAll("input")
    .on("change", changed);

var timeout = d3.timeout(function() {
  d3.select("input[value=\"grouped\"]")
      .property("checked", true)
      .dispatch("change");
}, 2000);

function changed() {
  timeout.stop();
  if (this.value === "grouped") transitionGrouped();
  else transitionStacked();
}

function transitionGrouped() {
  y.domain([0, yMax]);

  rect.transition()
      .duration(500)
      .delay(function(d, i) { return i * 10; })
      .attr("x", function(d, i) { return x(i) + x.bandwidth() / n * this.parentNode.__data__.key; })
      .attr("width", x.bandwidth() / n)
    .transition()
      .attr("y", function(d) { return y(d[1] - d[0]); })
      .attr("height", function(d) { return y(0) - y(d[1] - d[0]); });
}

function transitionStacked() {
  y.domain([0, y1Max]);

  rect.transition()
      .duration(500)
      .delay(function(d, i) { return i * 10; })
      .attr("y", function(d) { return y(d[1]); })
      .attr("height", function(d) { return y(d[0]) - y(d[1]); })
    .transition()
      .attr("x", function(d, i) { return x(i); })
      .attr("width", x.bandwidth());
}

// Returns an array of m psuedorandom, smoothly-varying non-negative numbers.
// Inspired by Lee Byron’s test data generator.
// http://leebyron.com/streamgraph/
function bumps(m) {
  var values = [], i, j, w, x, y, z;

  // Initialize with uniform random values in [0.1, 0.2).
  for (i = 0; i < m; ++i) {
    values[i] = 0.1 + 0.1 * Math.random();
  }

  // Add five random bumps.
  for (j = 0; j < 5; ++j) {
    x = 1 / (0.1 + Math.random());
    y = 2 * Math.random() - 0.5;
    z = 10 / (0.1 + Math.random());
    for (i = 0; i < m; i++) {
      w = (i / m - y) * z;
      values[i] += x * Math.exp(-w * w);
    }
  }

  // Ensure all values are positive.
  for (i = 0; i < m; ++i) {
    values[i] = Math.max(0, values[i]);
  }

  return values;
}

</script>

<br><br>
<hr>
<br><br>
<center><h1>Line Chart</h1></center>



<br><br>
<hr>
<br><br>
<center><h1>Scatter Plot</h1></center>


<script >

//read the data, store them in global variables
var data;
var xAxisName;
var yAxisName;
d3.json("graph.json", function (json) {
console.log("I read " + json.data.length + " data points.");
data = json.data;
visualize(data); //then start the visualization

});

function visualize(data)
{
//dimensions of the chart
var w = 900;
var h = 700;
//empty area between last element and chart borders
var padding = 100;

//the format of the data
var format = d3.format(".0");

//will use this one below
function getX(d) {
return d.x;
};

function getY(d) {
return d.y;
};

//the scales
var xScale = d3.scale.linear()
.domain([.100,.900])
.range([padding, w - padding]);
var yScale = d3.scale.linear()
.domain([50000000,170000000])
//.domain([d3.min(data, getY), d3.max(data, getY)])
.range([h - padding, padding]);

//the axes
var xAxis = d3.svg.axis()
.scale(xScale)
.orient("bottom")
.ticks(3)
.tickFormat(format);

var yAxis = d3.svg.axis()
.scale(yScale)
.orient("left")
.ticks(3)
.tickFormat(format);


//the svg chart!
var svg = d3.select("body")
.append("svg")
.attr("width", w)
.attr("height", h);


//create the points of the scatterplot
//well, they are svg circles
svg.selectAll("circle")
.data(data)
.enter()
.append("circle")
.attr("cx", function(d) { return xScale(d.x);})
.attr("cy", function(d) { return yScale(d.y);})
.attr("r", 16) //arbitrary. big enough? scale automatically?
.attr("x", getX)
.attr("x", getY)
.attr("class","circle")
.append("svg:title")
.text(function (d) {return "( Win % : " + d.x + ", Total Salary : " + d.y + ")";});


//create the axes, too
svg.append("g")
.attr("class", "axis")
.attr("transform", "translate(0," + (h - padding) + ")")
.call(xAxis);

svg.append("g")
.attr("class", "axis")
.attr("transform", "translate(" + padding + ",0)")
.call(yAxis);


}

</script>


